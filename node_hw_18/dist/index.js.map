{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";AAAA,YAAY;AACZ,kCAAkC;AAClC,uCAAuC;AACvC,mFAAmF;AACnF,wEAAwE;AACxE,mGAAmG;AAcnG,MAAM,SAAS,GAAc;IAC3B,IAAI,EAAE,KAAK;IACX,KAAK,EAAE,iBAAiB;IACxB,WAAW,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC;CAC/B,CAAC;AAqBF,SAAS,YAAY,CAAC,GAAQ;IAC5B,OAAO,CAAC,GAAG,CAAC,aAAa,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;IACrC,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;IACvC,OAAO,CAAC,GAAG,CAAC,gBAAgB,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;IAC/C,OAAO,CAAC,GAAG,CAAC,sBAAsB,GAAG,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC;IAC3D,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC;QACb,OAAO,CAAC,GAAG,CAAC,aAAa,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;IACvC,CAAC;AACH,CAAC;AAED,YAAY,CAAC;IACX,IAAI,EAAE,QAAQ;IACd,KAAK,EAAE,OAAO;IACd,MAAM,EAAE;QACN,IAAI,EAAE,IAAI;QACV,UAAU,EAAE,GAAG;KAChB;IACD,IAAI,EAAE,IAAI;CACX,CAAC,CAAC;AAYH,SAAS,iBAAiB,CAAC,OAAgB,EAAE,QAAgB;IAC3D,OAAO,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,GAAG,QAAQ,CAAC;AAClD,CAAC;AACD,MAAM,OAAO,GAAY,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;AACzD,MAAM,eAAe,GAAG,iBAAiB,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;AACxD,OAAO,CAAC,GAAG,CAAC,qBAAqB,eAAe,EAAE,CAAC,CAAC;AAepD,MAAM,SAAS,GAAe;IAC5B,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE;IAChC,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE;IAC9B,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE;CACnC,CAAC;AAEF,SAAS,mBAAmB,CAAC,YAAwB;IACnD,OAAO,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACvD,CAAC;AAED,MAAM,QAAQ,GAAG,mBAAmB,CAAC,SAAS,CAAC,CAAC;AAChD,OAAO,CAAC,GAAG,CAAC,sBAAsB,QAAQ,EAAE,CAAC,CAAC;AAmB9C,MAAM,OAAO,GAAY;IACvB,SAAS,EAAE,MAAM;IACjB,QAAQ,EAAE,KAAK;IACf,KAAK,EAAE,EAAE;CACV,CAAC;AAEF,SAAS,gBAAgB,CAAC,OAAgB;IACxC,OAAO,CAAC,GAAG,CAAC,iBAAiB,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;IACtE,OAAO,CAAC,GAAG,CAAC,kBAAkB,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;AACjD,CAAC;AAED,gBAAgB,CAAC,OAAO,CAAC,CAAC;AAa1B,MAAM,aAAa,GAAkB,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE;IAClD,OAAO,IAAI,GAAG,IAAI,CAAC;AACrB,CAAC,CAAC;AAEF,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC","sourcesContent":["// Задание 1\n// Объединение и пересечение типов\n// Создайте два типа: `Admin` и `User`.\n// Тип `Admin` должен включать поля `name` (строка) и `permissions` (массив строк),\n// а тип `User` должен включать поля `name` (строка) и `email` (строка).\n// Создайте тип `AdminUser`, который объединяет свойства обоих типов, и создайте объект этого типа.\n\ntype Admin = {\n  name: string;\n  permissions: string[];\n};\n\ntype User = {\n  name: string;\n  email: string;\n};\n\ntype AdminUser = Admin & User;\n\nconst adminUser: AdminUser = {\n  name: 'Bob',\n  email: 'bob@example.com',\n  permissions: ['read', 'write'],\n};\n\n// Задание 2\n// Вложенные объекты и опциональные поля\n// Создайте объект `Car` с полями `make` (строка), `model` (строка),\n// и вложенным объектом `engine`, который имеет поля `type` (строка) и `horsepower` (число).\n// Добавьте опциональное поле `year` (число) для года выпуска машины.\n// Напишите функцию, которая выводит информацию о машине.\n\ntype Engine = {\n  type: string;\n  horsepower: number;\n};\n\ntype Car = {\n  make: string;\n  model: string;\n  engine: Engine;\n  year?: number;\n};\n\nfunction printCarInfo(car: Car) {\n  console.log(`Car Make: ${car.make}`);\n  console.log(`Car Model: ${car.model}`);\n  console.log(`Engine Type: ${car.engine.type}`);\n  console.log(`Engine Horsepower: ${car.engine.horsepower}`);\n  if (car.year) {\n    console.log(`Car Year: ${car.year}`);\n  }\n}\n\nprintCarInfo({\n  make: 'Toyota',\n  model: 'Camry',\n  engine: {\n    type: 'V6',\n    horsepower: 301,\n  },\n  year: 2020,\n});\n\n// Задание 3\n// Интерфейс для функции с объектом\n// Создайте интерфейс для функции `calculateDiscount`, которая принимает объект `Product` с полями `name` (строка) и `price` (число), а также параметр `discount` (число).\n// Функция должна возвращать новую цену продукта с учетом скидки.\n\ninterface Product {\n  name: string;\n  price: number;\n}\n\nfunction calculateDiscount(product: Product, discount: number): number {\n  return product.price - product.price * discount;\n}\nconst product: Product = { name: 'Laptop', price: 1000 };\nconst discountedPrice = calculateDiscount(product, 0.1);\nconsole.log(`Discounted Price: ${discountedPrice}`);\n\n\n// Задание 4\n// Массив объектов и функции\n// Создайте интерфейс `Employee`, который включает поля `name` (строка) и `salary` (число).\n// Создайте массив объектов `Employee`, \n// затем напишите функцию, которая принимает этот массив и \n// возвращает массив зарплат всех сотрудников.\n\ninterface Employee {\n  name: string;\n  salary: number;\n}\n\nconst employees: Employee[] = [\n  { name: 'Alice', salary: 50000 },\n  { name: 'Bob', salary: 60000 },\n  { name: 'Charlie', salary: 70000 },\n];\n\nfunction getEmployeeSalaries(employeeList: Employee[]): number[] {\n  return employeeList.map(employee => employee.salary);\n}\n\nconst salaries = getEmployeeSalaries(employees);\nconsole.log(`Employee Salaries: ${salaries}`);\n\n\n// Задание 5\n// Наследование интерфейсов и работа с объектами\n// Создайте интерфейс `Person` с полями `firstName` (строка) и `lastName` (строка).\n// Создайте интерфейс `Student`, который наследует `Person` и добавляет поле `grade` (число).\n// Создайте объект `student` этого типа и напишите функцию, \n// которая выводит полное имя студента и его оценку.\n\ninterface Person {\n  firstName: string;\n  lastName: string;\n}\n\ninterface Student extends Person {\n  grade: number;\n}\n\nconst student: Student = {\n  firstName: 'John',\n  lastName: 'Doe',\n  grade: 90,\n};\n\nfunction printStudentInfo(student: Student) {\n  console.log(`Student Name: ${student.firstName} ${student.lastName}`);\n  console.log(`Student Grade: ${student.grade}`);\n}\n\nprintStudentInfo(student);\n\n\n// Задание 6\n// Интерфейс для функции с несколькими параметрами\n// Создайте интерфейс для функции `concatStrings`, \n// которая принимает два параметра: `str1` и `str2` (оба строки) и возвращает их объединение.\n// Реализуйте эту функцию и протестируйте её.\n\ninterface ConcatStrings {\n  (str1: string, str2: string): string;\n}\n\nconst concatStrings: ConcatStrings = (str1, str2) => {\n  return str1 + str2;\n};\n\nconsole.log(concatStrings('Hello, ', 'world!'));"]}
{"version":3,"file":"task4.js","sourceRoot":"","sources":["../src/task4.ts"],"names":[],"mappings":";AAAA,YAAY;AACZ,yDAAyD;AACzD,gEAAgE;AAChE,gEAAgE;AAChE,uDAAuD;AACvD,0DAA0D;AAC1D,2CAA2C;AAE3C,SAAS,kBAAkB,CAAC,EAAU;IACpC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC7B,UAAU,CAAC,GAAG,EAAE;YACd,OAAO,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;QACrC,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC,CAAC,CAAC;AACL,CAAC;AAED,KAAK,UAAU,aAAa,CAAC,MAAgB;IAC3C,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAChD,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC5C,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,OAAO,CAAC,CAAC;IACjD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;IACnD,CAAC;AACH,CAAC;AAED,MAAM,UAAU,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAClD,aAAa,CAAC,UAAU,CAAC,CAAC","sourcesContent":["// Задание 4\n// Асинхронная функция с динамическим временем выполнения\n// Напишите асинхронную функцию, которая принимает массив чисел.\n// Для каждого числа создайте промис, который будет завершаться \n// через количество миллисекунд, равное значению числа.\n// Используйте `Promise.all` для ожидания завершения всех \n// промисов и вывода результатов в консоль.\n\nfunction createDelayPromise(ms: number): Promise<string> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(`Resolved after ${ms} ms`);\n    }, ms);\n  });\n}\n\nasync function processDelays(delays: number[]) {\n  try {\n    const promises = delays.map(createDelayPromise);\n    const results = await Promise.all(promises);\n    console.log('All promises resolved:', results);\n  } catch (error) {\n    console.error('Error processing delays:', error);\n  }\n}\n\nconst delayArray = [1000, 2000, 1500, 3000, 2500];\nprocessDelays(delayArray);\n\n"]}
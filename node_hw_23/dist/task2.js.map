{"version":3,"file":"task2.js","sourceRoot":"","sources":["../src/task2.ts"],"names":[],"mappings":";AAAA,YAAY;AACZ,0CAA0C;AAC1C,oDAAoD;AACpD,gDAAgD;AAChD,+DAA+D;AAC/D,uEAAuE;AACvE,2BAA2B;AAE3B,SAAS,kBAAkB,CAAC,GAAW;IACrC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC7B,UAAU,CAAC,GAAG,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;QAC7B,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;AACL,CAAC;AAED,KAAK,UAAU,cAAc,CAAC,OAAiB;IAC7C,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACjD,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC5C,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;IAC7C,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC;AACH,CAAC;AAED,MAAM,WAAW,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;AAC5E,cAAc,CAAC,WAAW,CAAC,CAAC","sourcesContent":["// Задание 2\n// Асинхронная обработка данных из массива\n// Напишите функцию, которая принимает массив строк.\n// Каждая строка будет асинхронно обрабатываться\n// (например, преобразовываться в верхний регистр с задержкой).\n// Используйте `Promise.all` для выполнения всех операций параллельно и\n// вывода всех результатов.\n\nfunction processStringAsync(str: string): Promise<string> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(str.toUpperCase());\n    }, 2000);\n  });\n}\n\nasync function processStrings(strings: string[]) {\n  try {\n    const promises = strings.map(processStringAsync);\n    const results = await Promise.all(promises);\n    console.log('Processed strings:', results);\n  } catch (error) {\n    console.error('Error processing strings:', error);\n  }\n}\n\nconst stringArray = ['hello', 'world', 'this', 'is', 'async', 'processing'];\nprocessStrings(stringArray);\n"]}
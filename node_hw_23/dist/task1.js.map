{"version":3,"file":"task1.js","sourceRoot":"","sources":["../src/task1.ts"],"names":[],"mappings":";AAAA,YAAY;AACZ,6CAA6C;AAC7C,yDAAyD;AACzD,gCAAgC;AAChC,gFAAgF;AAChF,6CAA6C;AAC7C,+DAA+D;AAE/D,SAAS,UAAU;IACjB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC7B,UAAU,CAAC,GAAG,EAAE;YACd,OAAO,CAAC,sBAAsB,CAAC,CAAC;QAClC,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAS,UAAU;IACjB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC7B,UAAU,CAAC,GAAG,EAAE;YACd,OAAO,CAAC,sBAAsB,CAAC,CAAC;QAClC,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAS,UAAU;IACjB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC7B,UAAU,CAAC,GAAG,EAAE;YACd,OAAO,CAAC,sBAAsB,CAAC,CAAC;QAClC,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;AACL,CAAC;AAED,KAAK,UAAU,aAAa;IAC1B,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,MAAM,UAAU,EAAE,CAAC;QACnC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAErB,MAAM,OAAO,GAAG,MAAM,UAAU,EAAE,CAAC;QACnC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAErB,MAAM,OAAO,GAAG,MAAM,UAAU,EAAE,CAAC;QACnC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACvB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;IACjD,CAAC;AACH,CAAC;AAED,aAAa,EAAE,CAAC","sourcesContent":["// Задание 1\n// Обработка цепочки промисов с `async/await`\n// Создайте несколько функций, которые возвращают промисы\n// с разным временем выполнения.\n// Напишите функцию, которая вызывает эти промисы поочерёдно, используя `await`,\n// и обрабатывает результаты каждой операции.\n// Убедитесь, что цепочка промисов выполняется последовательно.\n\nfunction fetchData1(): Promise<string> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('Data from fetchData1');\n    }, 1000);\n  });\n}\n\nfunction fetchData2(): Promise<string> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('Data from fetchData2');\n    }, 2000);\n  });\n}\n\nfunction fetchData3(): Promise<string> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('Data from fetchData3');\n    }, 1500);\n  });\n}\n\nasync function mainFetchData() {\n  try {\n    const result3 = await fetchData3();\n    console.log(result3);\n\n    const result1 = await fetchData1();\n    console.log(result1);\n\n    const result2 = await fetchData2();\n    console.log(result2);\n  } catch (error) {\n    console.error('Error processing data:', error);\n  }\n}\n\nmainFetchData();\n"]}
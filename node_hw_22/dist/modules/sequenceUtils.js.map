{"version":3,"file":"sequenceUtils.js","sourceRoot":"","sources":["../../src/modules/sequenceUtils.ts"],"names":[],"mappings":"AAAA,YAAY;AACZ,qDAAqD;AACrD,kEAAkE;AAClE,4FAA4F;AAC5F,gFAAgF;AAChF,6EAA6E;AAE7E,MAAM,UAAU,iBAAiB,CAAC,KAAa;IAC7C,IAAI,KAAK,GAAG,CAAC;QAAE,OAAO,EAAE,CAAC;IAEzB,MAAM,QAAQ,GAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAClC,OAAO,IAAI,EAAE,CAAC;QACZ,MAAM,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC3E,IAAI,IAAI,GAAG,KAAK;YAAE,MAAM;QACxB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,gDAAgD;AAChD,MAAM,UAAU,oBAAoB,CAAC,KAAa;IAChD,MAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC;QACtC,IAAI,OAAO,GAAG,IAAI,CAAC;QACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YACzC,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;gBAClB,OAAO,GAAG,KAAK,CAAC;gBAChB,MAAM;YACR,CAAC;QACH,CAAC;QACD,IAAI,OAAO;YAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["// Задание 4\n// Модули для работы с числовыми последовательностями\n// Создайте файл `sequenceUtils.ts`, в котором определите функции:\n// `generateFibonacci`, которая генерирует последовательность Фибоначчи до указанного числа.\n// `generatePrimeNumbers`, которая генерирует простые числа до указанного числа.\n// В файле `main.ts` импортируйте эти функции и протестируйте их на примерах.\n\nexport function generateFibonacci(limit: number): number[] {\n  if (limit < 0) return [];\n\n  const sequence: number[] = [0, 1];\n  while (true) {\n    const next = sequence[sequence.length - 1] + sequence[sequence.length - 2];\n    if (next > limit) break;\n    sequence.push(next);\n  }\n\n  return sequence;\n}\n\n// Генерация простых чисел до указанного предела\nexport function generatePrimeNumbers(limit: number): number[] {\n  const primes: number[] = [];\n  for (let num = 2; num <= limit; num++) {\n    let isPrime = true;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) primes.push(num);\n  }\n  return primes;\n}\n"]}
{"version":3,"file":"userManagement.js","sourceRoot":"","sources":["../../src/modules/userManagement.ts"],"names":[],"mappings":"AAAA,YAAY;AACZ,4DAA4D;AAC5D,8FAA8F;AAC9F,uGAAuG;AACvG,2FAA2F;AAC3F,oDAAoD;AACpD,6FAA6F;AAE7F,MAAM,KAAW,cAAc,CAc9B;AAdD,WAAiB,cAAc;IAC7B,IAAiB,KAAK,CAYrB;IAZD,WAAiB,KAAK;QACpB,MAAa,SAAS;YAEX;YACA;YACA;YAHT,YACS,IAAY,EACZ,KAAa,EACb,YAAqB;gBAFrB,SAAI,GAAJ,IAAI,CAAQ;gBACZ,UAAK,GAAL,KAAK,CAAQ;gBACb,iBAAY,GAAZ,YAAY,CAAS;YAC3B,CAAC;YAEG,mBAAmB,CAAC,YAAqB;gBAC9C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;YACnC,CAAC;SACF;QAVY,eAAS,YAUrB,CAAA;IACH,CAAC,EAZgB,KAAK,GAAL,oBAAK,KAAL,oBAAK,QAYrB;AACH,CAAC,EAdgB,cAAc,KAAd,cAAc,QAc9B","sourcesContent":["// Задание 3\n// Вложенные пространства имен для управления пользователями\n// Создайте файл `userManagement.ts`, в котором определите пространство имен `UserManagement`.\n// Внутри него создайте вложенное пространство имен `Admin`. Внутри `Admin` создайте класс `AdminUser`,\n// который будет иметь свойства для имени, email и прав доступа (например, `isSuperAdmin`).\n// Также создайте методы для изменения прав доступа.\n// Используйте этот класс в файле `main.ts` для создания администратора и изменения его прав.\n\nexport namespace UserManagement {\n  export namespace Admin {\n    export class AdminUser {\n      constructor(\n        public name: string,\n        public email: string,\n        public isSuperAdmin: boolean\n      ) {}\n\n      public setSuperAdminStatus(isSuperAdmin: boolean) {\n        this.isSuperAdmin = isSuperAdmin;\n      }\n    }\n  }\n}\n"]}
{"version":3,"file":"task4.js","sourceRoot":"","sources":["../src/task4.ts"],"names":[],"mappings":";AAAA,YAAY;AACZ,4BAA4B;AAC5B,yFAAyF;AACzF,gCAAgC;AAChC,uFAAuF;AACvF,iFAAiF;AACjF,0EAA0E;AAC1E,sDAAsD;AAEtD,MAAe,OAAO;IACV,OAAO,CAAS;IAE1B,YAAY,cAAsB;QAChC,IAAI,CAAC,OAAO,GAAG,cAAc,CAAC;IAChC,CAAC;IAKD,UAAU;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;CACF;AAED,MAAM,cAAe,SAAQ,OAAO;IAC1B,YAAY,CAAS;IAE7B,YAAY,cAAsB,EAAE,YAAoB;QACtD,KAAK,CAAC,cAAc,CAAC,CAAC;QACtB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAED,OAAO,CAAC,MAAc;QACpB,IAAI,CAAC,OAAO,IAAI,MAAM,CAAC;IACzB,CAAC;IAED,QAAQ,CAAC,MAAc;QACrB,IAAI,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YAC3B,IAAI,CAAC,OAAO,IAAI,MAAM,CAAC;QACzB,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;QACtC,CAAC;IACH,CAAC;IAED,WAAW;QACT,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC;IAC3D,CAAC;CACF;AAED,MAAM,eAAgB,SAAQ,OAAO;IAC3B,GAAG,CAAS;IAEpB,YAAY,cAAsB,EAAE,GAAW;QAC7C,KAAK,CAAC,cAAc,CAAC,CAAC;QACtB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACjB,CAAC;IAED,OAAO,CAAC,MAAc;QACpB,IAAI,CAAC,OAAO,IAAI,MAAM,CAAC;IACzB,CAAC;IAED,QAAQ,CAAC,MAAc;QACrB,MAAM,KAAK,GAAG,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC;QAChC,IAAI,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YAC1B,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC;QACxB,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;QACxD,CAAC;IACH,CAAC;CACF;AAED,kBAAkB;AAClB,MAAM,OAAO,GAAG,IAAI,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AAC5C,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AACrB,OAAO,CAAC,WAAW,EAAE,CAAC;AACtB,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AACtB,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC;AAE7D,MAAM,QAAQ,GAAG,IAAI,eAAe,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AAC/C,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AACtB,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AACvB,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC","sourcesContent":["// Задание 4\n// Абстрактный класс Account\n// Создайте абстрактный класс `Account` с абстрактными методами `deposit(amount: number)`\n// и `withdraw(amount: number)`.\n// Реализуйте классы `SavingsAccount` и `CheckingAccount`, которые наследуют `Account`.\n// В классе `SavingsAccount` добавьте логику для начисления процентов на остаток.\n// В классе `CheckingAccount` реализуйте снятие средств с учетом комиссии.\n// Проверьте работу методов на объектах обоих классов.\n\nabstract class Account {\n  protected balance: number;\n\n  constructor(initialBalance: number) {\n    this.balance = initialBalance;\n  }\n\n  abstract deposit(amount: number): void;\n  abstract withdraw(amount: number): void;\n\n  getBalance(): number {\n    return this.balance;\n  }\n}\n\nclass SavingsAccount extends Account {\n  private interestRate: number;\n\n  constructor(initialBalance: number, interestRate: number) {\n    super(initialBalance);\n    this.interestRate = interestRate;\n  }\n\n  deposit(amount: number): void {\n    this.balance += amount;\n  }\n\n  withdraw(amount: number): void {\n    if (amount <= this.balance) {\n      this.balance -= amount;\n    } else {\n      console.log('Недостаточно средств');\n    }\n  }\n\n  addInterest(): void {\n    this.balance += (this.balance * this.interestRate) / 100;\n  }\n}\n\nclass CheckingAccount extends Account {\n  private fee: number;\n\n  constructor(initialBalance: number, fee: number) {\n    super(initialBalance);\n    this.fee = fee;\n  }\n\n  deposit(amount: number): void {\n    this.balance += amount;\n  }\n\n  withdraw(amount: number): void {\n    const total = amount + this.fee;\n    if (total <= this.balance) {\n      this.balance -= total;\n    } else {\n      console.log('Недостаточно средств с учетом комиссии');\n    }\n  }\n}\n\n// Проверка работы\nconst savings = new SavingsAccount(1000, 5);\nsavings.deposit(500);\nsavings.addInterest();\nsavings.withdraw(200);\nconsole.log('SavingsAccount balance:', savings.getBalance());\n\nconst checking = new CheckingAccount(1000, 10);\nchecking.deposit(300);\nchecking.withdraw(200);\nconsole.log('CheckingAccount balance:', checking.getBalance());\n"]}
{"version":3,"file":"task2.js","sourceRoot":"","sources":["../src/task2.ts"],"names":[],"mappings":";AAAA,YAAY;AACZ,mCAAmC;AACnC,6CAA6C;AAC7C,0FAA0F;AAC1F,0DAA0D;AAC1D,wFAAwF;AACxF,+CAA+C;AAE/C,MAAe,KAAK;CAGnB;AAED,MAAe,YAAa,SAAQ,KAAK;CAExC;AAED,MAAM,aAAc,SAAQ,YAAY;IACtC,IAAI,CAAS;IACb,KAAK,CAAS;IACd,MAAM,CAAS;IAEf,YAAY,MAAc,EAAE,KAAa;QACvC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,aAAa;QACX,OAAO,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IAC7C,CAAC;CACF;AAED,MAAM,gBAAiB,SAAQ,YAAY;IACzC,IAAI,CAAS;IACb,KAAK,CAAS;IACd,MAAM,CAAS;IACf,KAAK,CAAS;IAEd,YAAY,KAAa,EAAE,MAAc,EAAE,KAAa;QACtD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC;QACxB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,aAAa;QACX,OAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;IAClC,CAAC;CACF;AAED,MAAM,WAAW,GAAmB;IAClC,IAAI,aAAa,CAAC,CAAC,EAAE,KAAK,CAAC;IAC3B,IAAI,gBAAgB,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC;CACnC,CAAC;AAEF,WAAW,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;IAC5B,OAAO,CAAC,GAAG,CACT,GAAG,KAAK,CAAC,IAAI,aAAa,KAAK,CAAC,KAAK,WAAW,KAAK,CAAC,aAAa,EAAE,EAAE,CACxE,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["// Задание 2\n// Абстрактный класс Shape с цветом\n// Создайте абстрактный класс `ColoredShape`,\n// который наследует `Shape` (из задания 4 на уроке) и добавляет абстрактное поле `color`.\n// Реализуйте классы `ColoredCircle` и `ColoredRectangle`,\n// которые наследуют `ColoredShape`, задают `color` и реализуют метод `calculateArea()`.\n// Выведите площадь и цвет для каждого объекта.\n\nabstract class Shape {\n  abstract name: string;\n  abstract calculateArea(): number;\n}\n\nabstract class ColoredShape extends Shape {\n  abstract color: string;\n}\n\nclass ColoredCircle extends ColoredShape {\n  name: string;\n  color: string;\n  radius: number;\n\n  constructor(radius: number, color: string) {\n    super();\n    this.name = 'Circle';\n    this.radius = radius;\n    this.color = color;\n  }\n\n  calculateArea(): number {\n    return Math.PI * this.radius * this.radius;\n  }\n}\n\nclass ColoredRectangle extends ColoredShape {\n  name: string;\n  width: number;\n  height: number;\n  color: string;\n\n  constructor(width: number, height: number, color: string) {\n    super();\n    this.name = 'Rectangle';\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n\n  calculateArea(): number {\n    return this.width * this.height;\n  }\n}\n\nconst shapesArray: ColoredShape[] = [\n  new ColoredCircle(5, 'red'),\n  new ColoredRectangle(4, 6, 'blue'),\n];\n\nshapesArray.forEach((shape) => {\n  console.log(\n    `${shape.name} - Color: ${shape.color}, Area: ${shape.calculateArea()}`\n  );\n});\n"]}